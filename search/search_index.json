{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Dataclasses Avro Schema CLI","text":"<p>Command line interface from dataclasses-avroschema to work with <code>avsc</code> resources</p> <p> </p>"},{"location":"#requirements","title":"Requirements","text":"<p><code>python 3.7+</code></p>"},{"location":"#usage","title":"Usage","text":"<p>You can validate <code>avro schemas</code> either from a <code>local file</code> or <code>url</code>:</p> <p>Assuming that we have a local file <code>schema.avsc</code> that contains an <code>avro schema</code>, we can check whether it is valid</p> <pre><code>dc-avro validate-schema --path schema.avsc\n\nValid schema!! \ud83d\udc4d {\n'type': 'record',\n    'name': 'UserAdvance',\n    'fields': [\n{'name': 'name', 'type': 'string'},\n        {'name': 'age', 'type': 'long'},\n        {'name': 'pets', 'type': {'type': 'array', 'items': 'string', 'name': 'pet'}},\n        {'name': 'accounts', 'type': {'type': 'map', 'values': 'long', 'name': 'account'}},\n        {'name': 'favorite_colors', 'type': {'type': 'enum', 'name': 'FavoriteColor', 'symbols': ['BLUE', 'YELLOW', 'GREEN']}},\n        {'name': 'has_car', 'type': 'boolean', 'default': False},\n        {'name': 'country', 'type': 'string', 'default': 'Argentina'},\n        {'name': 'address', 'type': ['null', 'string'], 'default': None},\n        {'name': 'md5', 'type': {'type': 'fixed', 'name': 'md5', 'size': 16}}\n]\n}\n</code></pre> <p>To see all the commands execute <code>dc-avro --help</code></p>"},{"location":"#development","title":"Development","text":"<ol> <li>Install requirements: <code>poetry install</code></li> <li>Code linting: <code>./scripts/format</code></li> <li>Run tests: <code>./scripts/test</code></li> </ol>"},{"location":"commands/","title":"Commands","text":"<p>This section describes all the commands supported by this library together with <code>dataclasses-avroschema</code>. To show the commands we will work with the following schema:</p> <pre><code>{\n    'type': 'record',\n    'name': 'UserAdvance',\n    'fields': [\n        {'name': 'name', 'type': 'string'},\n        {'name': 'age', 'type': 'long'},\n        {'name': 'pets', 'type': {'type': 'array', 'items': 'string', 'name': 'pet'}},\n        {'name': 'accounts', 'type': {'type': 'map', 'values': 'long', 'name': 'account'}},\n        {'name': 'favorite_colors', 'type': {'type': 'enum', 'name': 'FavoriteColor', 'symbols': ['BLUE', 'YELLOW', 'GREEN']}},\n        {'name': 'has_car', 'type': 'boolean', 'default': False},\n        {'name': 'country', 'type': 'string', 'default': 'Argentina'},\n        {'name': 'address', 'type': ['null', 'string'], 'default': None},\n        {'name': 'md5', 'type': {'type': 'fixed', 'name': 'md5', 'size': 16}}\n    ]\n}\n</code></pre> <p>Note</p> <p>All the commands can be executed using a <code>path</code> or a <code>url</code></p>"},{"location":"commands/#validate-schemas","title":"Validate schemas","text":"<p>The previous schema is a valid one. If we assume that we have a <code>schema.avsc</code> in the file system which contains the previous schema we can validate it:</p> <pre><code>dc-avro validate-schema --path schema.avsc\n</code></pre> <p>resulting in</p> <pre><code>Valid schema!! \ud83d\udc4d {\n'type': 'record',\n    'name': 'UserAdvance',\n    'fields': [\n{'name': 'name', 'type': 'string'},\n        {'name': 'age', 'type': 'long'},\n        {'name': 'pets', 'type': {'type': 'array', 'items': 'string', 'name': 'pet'}},\n        {'name': 'accounts', 'type': {'type': 'map', 'values': 'long', 'name': 'account'}},\n        {'name': 'favorite_colors', 'type': {'type': 'enum', 'name': 'FavoriteColor', 'symbols': ['BLUE', 'YELLOW', 'GREEN']}},\n        {'name': 'has_car', 'type': 'boolean', 'default': False},\n        {'name': 'country', 'type': 'string', 'default': 'Argentina'},\n        {'name': 'address', 'type': ['null', 'string'], 'default': None},\n        {'name': 'md5', 'type': {'type': 'fixed', 'name': 'md5', 'size': 16}}\n]\n}\n</code></pre> <p>If the previous schema is stored in a <code>schema registry</code>, for example in <code>https://schema-registry/schema/1</code> we can validate it using the <code>--url</code>:</p> <pre><code>dc-avro validate-schema --url https://schema-registry/schema/1\n</code></pre> <p>resulting in</p> <pre><code>Valid schema!! \ud83d\udc4d {\n'type': 'record',\n    'name': 'UserAdvance',\n    'fields': [\n{'name': 'name', 'type': 'string'},\n        {'name': 'age', 'type': 'long'},\n        {'name': 'pets', 'type': {'type': 'array', 'items': 'string', 'name': 'pet'}},\n        {'name': 'accounts', 'type': {'type': 'map', 'values': 'long', 'name': 'account'}},\n        {'name': 'favorite_colors', 'type': {'type': 'enum', 'name': 'FavoriteColor', 'symbols': ['BLUE', 'YELLOW', 'GREEN']}},\n        {'name': 'has_car', 'type': 'boolean', 'default': False},\n        {'name': 'country', 'type': 'string', 'default': 'Argentina'},\n        {'name': 'address', 'type': ['null', 'string'], 'default': None},\n        {'name': 'md5', 'type': {'type': 'fixed', 'name': 'md5', 'size': 16}}\n]\n}\n</code></pre> <p>If an schema is invalid, for example the folling one:</p> <pre><code>{\n\"type\": \"record\",\n    \"name\": \"UserAdvance\",\n    \"fields\": [\n{\"name\": \"name\", \"type\": \"string\"},\n      {\"name\": \"age\", \"type\": \"long\"},\n      {\"name\": \"pets\", \"type\": {\"type\": \"array\", \"items\": \"string\", \"name\": \"pet\"}},\n      { \"name\": \"accounts\", \"type\": { \"type\": \"map\", \"values\": \"long\", \"name\": \"account\"}},\n      {\"name\": \"favorite_colors\", \"type\": {\"type\": \"enum\", \"name\": \"FavoriteColor\", \"symbols\": [\"BLUE\", \"YELLOW\", \"GREEN\"]}},\n      {\"name\": \"has_car\", \"type\": \"boolean\", \"default\": 1}, # ERROR!!!!\n{ \"name\": \"country\", \"type\": \"string\", \"default\": \"Argentina\"},\n      {\"name\": \"address\", \"type\": [\"null\", \"string\"], \"default\": 10},\n      {\"name\": \"md5\", \"type\": {\"type\": \"fixed\", \"name\": \"md5\", \"size\": 16}}\n]\n}\n</code></pre> <p>The result will be:</p> <pre><code>InvalidSchema: Schema {'type': 'record', 'name': 'UserAdvance', 'fields': [{'name': 'name', 'type': 'string'}, {'name': 'age', 'type': 'long'}, {'name': 'pets', 'type': {'type': 'array', 'items': 'string', 'name': 'pet'}}, {'name': 'accounts', 'type': {'type': 'map', 'values': 'long', 'name': 'account'}}, {'name': 'favorite_colors', 'type': {'type': 'enum', 'name': 'FavoriteColor', 'symbols': ['BLUE', 'YELLOW', 'GREEN']}}, {'name': 'has_car', 'type': 'boolean', 'default': 1}, {'name': 'country', 'type': 'string', 'default': 'Argentina'}, {'name': 'address', 'type': ['null', 'string'], 'default': 10}, {'name': 'md5', 'type': {'type': 'fixed', 'name': 'md5', 'size': 16}}]} is not valid.\n Error: `Default value &lt;1&gt; must match schema type: boolean`\n</code></pre>"},{"location":"commands/#generate-models-from-schemas","title":"Generate models from schemas","text":"<p>Python models can be generated using the command <code>generate-model</code>. This command also works with <code>path</code> and <code>url</code>. It is also possible to provide the <code>base-class</code> that will be use in the <code>models</code>. This base class can be <code>[AvroModel|BaseModel|AvroBaseModel]</code></p> <p></p> Dataclass modelsPydantic models <pre><code>dc-avro generate-model --path schema.avsc\n\nfrom dataclasses_avroschema import AvroModel\nfrom dataclasses_avroschema import types\nimport dataclasses\nimport enum\nimport typing\n\n\nclass FavoriteColor(enum.Enum):\n    BLUE = \"BLUE\"\n    YELLOW = \"YELLOW\"\n    GREEN = \"GREEN\"\n\n\n@dataclasses.dataclass\nclass UserAdvance(AvroModel):\n    name: str\n    age: int\n    pets: typing.List\n    accounts: typing.Dict\n    favorite_colors: FavoriteColor\n    md5: types.Fixed = types.Fixed(16)\n    has_car: bool = False\n    country: str = \"Argentina\"\n    address: typing.Optional = None\n</code></pre> <pre><code>dc-avro generate-model --path schema.avsc --base-class BaseModel\n\nfrom dataclasses_avroschema import types\nfrom pydantic import BaseModel\nimport enum\nimport typing\n\n\nclass FavoriteColor(enum.Enum):\n    BLUE = \"BLUE\"\n    YELLOW = \"YELLOW\"\n    GREEN = \"GREEN\"\n\n\nclass UserAdvance(BaseModel):\n    name: str\n    age: int\n    pets: typing.List\n    accounts: typing.Dict\n    favorite_colors: FavoriteColor\n    md5: types.Fixed = types.Fixed(16)\n    has_car: bool = False\n    country: str = \"Argentina\"\n    address: typing.Optional = None\n</code></pre> <p>Note</p> <p>If you want to save the result to a local file you can execute <code>dc-avro generate-model --path schema.avsc &gt; my-models.py</code></p>"},{"location":"commands/#serialize-data-with-schema","title":"Serialize data with schema","text":"<p>We can <code>serialize</code> data with schemas either in <code>avro</code> or <code>avro-json</code>, for example:</p> Event<pre><code>{'name': 'bond', 'age': 50, 'pets': ['dog', 'cat'], 'accounts': {'key': 1}, 'has_car': False, 'favorite_colors': 'BLUE', 'country': 'Argentina', 'address': None, 'md5': b'u00ffffffffffffx'}\n</code></pre> avro serializationavro-json serialization <pre><code>dc-avro serialize \"{'name': 'bond', 'age': 50, 'pets': ['dog', 'cat'], 'accounts': {'key': 1}, 'has_car': False, 'favorite_colors': 'BLUE', 'country': 'Argentina', 'address': None, 'md5': b'u00ffffffffffffx'}\" --path ./tests/schemas/example.avsc\n\nb'\\x08bondd\\x04\\x06dog\\x06cat\\x00\\x02\\x06key\\x02\\x00\\x00\\x00\\x12Argentina\\x00u00ffffffffffffx'\n</code></pre> <pre><code>dc-avro deserialize '{\"name\": \"bond\", \"age\": 50, \"pets\": [\"dog\", \"cat\"], \"accounts\": {\"key\": 1}, \"favorite_colors\": \"BLUE\", \"has_car\": false, \"country\":  \"Argentina\", \"address\": null, \"md5\": \"u00ffffffffffffx\"}' --path ./tests/schemas/example.avsc --serialization-type avro-json\n\n{\n    'name': 'bond',\n    'age': 50,\n    'pets': ['dog', 'cat'],\n    'accounts': {'key': 1},\n    'favorite_colors': 'BLUE',\n    'has_car': False,\n    'country': 'Argentina',\n    'address': None,\n    'md5': b'u00ffffffffffffx'\n}\n</code></pre> <p>Note</p> <p>The data provided to the command must be wrapped in quotes as it is interpreted as a string and then converted to a python <code>dict</code></p>"},{"location":"commands/#deserialize-data-with-schema","title":"Deserialize data with schema","text":"<p>We can <code>deserialize</code> data with schemas either in <code>avro</code> or <code>avro-json</code>, for example:</p> avro deserializationavro-json deserialization <pre><code>dc-avro deserialize 'b\"\\x08bondd\\x04\\x06dog\\x06cat\\x00\\x02\\x06key\\x02\\x00\\x00\\x00\\x12Argentina\\x00u00ffffffffffffx\"' --path ./tests/schemas/example.avsc\n\n{\n    'name': 'bond',\n    'age': 50,\n    'pets': ['dog', 'cat'],\n    'accounts': {'key': 1},\n    'favorite_colors': 'BLUE',\n    'has_car': False,\n    'country': 'Argentina',\n    'address': None,\n    'md5': b'u00ffffffffffffx'\n}\n</code></pre> <pre><code>dc-avro deserialize '{\"name\": \"bond\", \"age\": 50, \"pets\": [\"dog\", \"cat\"], \"accounts\": {\"key\": 1}, \"favorite_colors\": \"BLUE\", \"has_car\": false, \"country\":  \"Argentina\", \"address\": null, \"md5\": \"u00ffffffffffffx\"}' --path ./tests/schemas/example.avsc --serialization-type avro-json\n\n{\n    'name': 'bond',\n    'age': 50,\n    'pets': ['dog', 'cat'],\n    'accounts': {'key': 1},\n    'favorite_colors': 'BLUE',\n    'has_car': False,\n    'country': 'Argentina',\n    'address': None,\n    'md5': b'u00ffffffffffffx'\n}\n</code></pre> <p>Note</p> <p>For  <code>avro deserialization</code> you have to include the character <code>b</code> in the string to indicate that the actual value is <code>bytes</code></p>"},{"location":"commands/#view-diff-between-schemas","title":"View diff between schemas","text":"<p>\ud83d\udea7\ud83d\udea7\ud83d\udea7\ud83d\udea7\ud83d\udea7</p>"},{"location":"commands/#generate-fake-data-from-schema","title":"Generate fake data from schema","text":"<p>\ud83d\udea7\ud83d\udea7\ud83d\udea7\ud83d\udea7\ud83d\udea7</p>"}]}